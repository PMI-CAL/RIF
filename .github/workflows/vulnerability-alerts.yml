name: Vulnerability Alerts Automation

on:
  # Trigger on vulnerability alerts
  repository_vulnerability_alert:
    types: [create]
  
  # Trigger on Dependabot alerts
  dependabot:
    types: [created, updated, resolved]
  
  # Manual trigger for testing
  workflow_dispatch:
    inputs:
      alert_level:
        description: 'Test alert level'
        required: false
        default: 'high'
        type: choice
        options:
          - critical
          - high
          - medium
          - low
      simulate_alert:
        description: 'Simulate vulnerability alert'
        required: false
        default: false
        type: boolean

  # Daily scan for new vulnerabilities
  schedule:
    - cron: '0 6 * * *'  # Daily at 6 AM UTC

env:
  VULNERABILITY_THRESHOLD_CRITICAL: 0
  VULNERABILITY_THRESHOLD_HIGH: 5
  VULNERABILITY_THRESHOLD_MEDIUM: 20
  SECURITY_TEAM_EMAIL: 'security@rif-framework.org'

jobs:
  # Vulnerability Assessment
  vulnerability-assessment:
    name: Vulnerability Assessment
    runs-on: ubuntu-latest
    outputs:
      critical-count: ${{ steps.assessment.outputs.critical }}
      high-count: ${{ steps.assessment.outputs.high }}
      medium-count: ${{ steps.assessment.outputs.medium }}
      low-count: ${{ steps.assessment.outputs.low }}
      total-count: ${{ steps.assessment.outputs.total }}
      severity: ${{ steps.assessment.outputs.severity }}
      action-required: ${{ steps.assessment.outputs.action-required }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install security assessment tools
        run: |
          pip install safety pip-audit requests pyyaml
          
          # Install GitHub CLI for vulnerability queries
          if ! command -v gh &> /dev/null; then
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh
          fi

      - name: Assess vulnerabilities
        id: assessment
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          python3 << 'EOF'
          import subprocess
          import json
          import os
          from datetime import datetime
          
          # Initialize counters
          critical_count = 0
          high_count = 0
          medium_count = 0
          low_count = 0
          
          vulnerabilities = []
          
          # Check Python dependencies with safety
          try:
              safety_result = subprocess.run(['safety', 'check', '--json'], 
                                           capture_output=True, text=True)
              if safety_result.stdout:
                  safety_data = json.loads(safety_result.stdout)
                  for vuln in safety_data:
                      severity = 'high'  # Safety typically reports high-severity issues
                      vulnerabilities.append({
                          'source': 'safety',
                          'package': vuln.get('package_name', 'unknown'),
                          'vulnerability': vuln.get('vulnerability_id', 'unknown'),
                          'severity': severity,
                          'description': vuln.get('advisory', 'No description')
                      })
                      high_count += 1
          except Exception as e:
              print(f"Safety check failed: {e}")
          
          # Check with pip-audit
          try:
              pip_audit_result = subprocess.run(['pip-audit', '--format=json'], 
                                              capture_output=True, text=True)
              if pip_audit_result.stdout:
                  pip_audit_data = json.loads(pip_audit_result.stdout)
                  for vuln in pip_audit_data.get('vulnerabilities', []):
                      severity = vuln.get('fix_versions', {}).get('severity', 'medium').lower()
                      vulnerabilities.append({
                          'source': 'pip-audit',
                          'package': vuln.get('package', 'unknown'),
                          'vulnerability': vuln.get('id', 'unknown'),
                          'severity': severity,
                          'description': vuln.get('description', 'No description')
                      })
                      
                      if severity == 'critical':
                          critical_count += 1
                      elif severity == 'high':
                          high_count += 1
                      elif severity == 'medium':
                          medium_count += 1
                      else:
                          low_count += 1
          except Exception as e:
              print(f"pip-audit check failed: {e}")
          
          # Check GitHub Security Advisories
          try:
              gh_result = subprocess.run([
                  'gh', 'api', 'repos/{owner}/{repo}/vulnerability-alerts',
                  '--paginate'
              ], capture_output=True, text=True, env=os.environ)
              
              if gh_result.stdout:
                  gh_advisories = json.loads(gh_result.stdout)
                  for advisory in gh_advisories:
                      severity = advisory.get('security_advisory', {}).get('severity', 'medium').lower()
                      vulnerabilities.append({
                          'source': 'github',
                          'package': advisory.get('security_vulnerability', {}).get('package', {}).get('name', 'unknown'),
                          'vulnerability': advisory.get('security_advisory', {}).get('ghsa_id', 'unknown'),
                          'severity': severity,
                          'description': advisory.get('security_advisory', {}).get('summary', 'No description')
                      })
                      
                      if severity == 'critical':
                          critical_count += 1
                      elif severity == 'high':
                          high_count += 1
                      elif severity == 'medium':
                          medium_count += 1
                      else:
                          low_count += 1
          except Exception as e:
              print(f"GitHub advisories check failed: {e}")
          
          # Handle test simulation
          if "${{ github.event.inputs.simulate_alert }}" == "true":
              test_severity = "${{ github.event.inputs.alert_level }}"
              vulnerabilities.append({
                  'source': 'simulation',
                  'package': 'test-package',
                  'vulnerability': 'TEST-2024-001',
                  'severity': test_severity,
                  'description': f'Simulated {test_severity} severity vulnerability for testing'
              })
              
              if test_severity == 'critical':
                  critical_count += 1
              elif test_severity == 'high':
                  high_count += 1
              elif test_severity == 'medium':
                  medium_count += 1
              else:
                  low_count += 1
          
          total_count = critical_count + high_count + medium_count + low_count
          
          # Determine overall severity
          if critical_count > 0:
              overall_severity = 'critical'
          elif high_count > 0:
              overall_severity = 'high'
          elif medium_count > 0:
              overall_severity = 'medium'
          else:
              overall_severity = 'low'
          
          # Determine if action is required based on thresholds
          action_required = (
              critical_count > int("${{ env.VULNERABILITY_THRESHOLD_CRITICAL }}") or
              high_count > int("${{ env.VULNERABILITY_THRESHOLD_HIGH }}") or
              medium_count > int("${{ env.VULNERABILITY_THRESHOLD_MEDIUM }}")
          )
          
          # Save vulnerability report
          report = {
              'timestamp': datetime.now().isoformat(),
              'commit': "${{ github.sha }}",
              'total_vulnerabilities': total_count,
              'severity_counts': {
                  'critical': critical_count,
                  'high': high_count,
                  'medium': medium_count,
                  'low': low_count
              },
              'overall_severity': overall_severity,
              'action_required': action_required,
              'vulnerabilities': vulnerabilities
          }
          
          with open('vulnerability-report.json', 'w') as f:
              json.dump(report, f, indent=2)
          
          # Output results
          print(f"Vulnerability Assessment Results:")
          print(f"Critical: {critical_count}")
          print(f"High: {high_count}")
          print(f"Medium: {medium_count}")
          print(f"Low: {low_count}")
          print(f"Total: {total_count}")
          print(f"Overall Severity: {overall_severity}")
          print(f"Action Required: {action_required}")
          
          # Set GitHub outputs
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"critical={critical_count}\n")
              f.write(f"high={high_count}\n")
              f.write(f"medium={medium_count}\n")
              f.write(f"low={low_count}\n")
              f.write(f"total={total_count}\n")
              f.write(f"severity={overall_severity}\n")
              f.write(f"action-required={'true' if action_required else 'false'}\n")
          EOF

      - name: Upload vulnerability report
        uses: actions/upload-artifact@v4
        with:
          name: vulnerability-report
          path: vulnerability-report.json
          retention-days: 90

  # Emergency Response (Critical/High vulnerabilities)
  emergency-response:
    name: Emergency Vulnerability Response
    runs-on: ubuntu-latest
    needs: vulnerability-assessment
    if: needs.vulnerability-assessment.outputs.action-required == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create emergency issue
        id: create-issue
        uses: actions/github-script@v7
        with:
          script: |
            const severity = '${{ needs.vulnerability-assessment.outputs.severity }}';
            const criticalCount = parseInt('${{ needs.vulnerability-assessment.outputs.critical-count }}');
            const highCount = parseInt('${{ needs.vulnerability-assessment.outputs.high-count }}');
            const totalCount = parseInt('${{ needs.vulnerability-assessment.outputs.total-count }}');
            
            const title = `🚨 Security Alert: ${criticalCount + highCount} ${severity.toUpperCase()} vulnerabilities detected`;
            
            const body = `## Security Vulnerability Alert
            
            **Severity**: ${severity.toUpperCase()}
            **Total Vulnerabilities**: ${totalCount}
            **Critical**: ${criticalCount}
            **High**: ${highCount}
            **Medium**: ${{ needs.vulnerability-assessment.outputs.medium-count }}
            **Low**: ${{ needs.vulnerability-assessment.outputs.low-count }}
            
            **Commit**: ${{ github.sha }}
            **Branch**: ${{ github.ref_name }}
            **Triggered by**: ${{ github.event_name }}
            
            ## Immediate Actions Required
            
            - [ ] Review vulnerability report artifact
            - [ ] Identify affected components
            - [ ] Assess exploit risk and impact
            - [ ] Create patches or updates
            - [ ] Test security fixes
            - [ ] Deploy emergency updates if needed
            
            ## Automated Response
            
            This issue was automatically created by the RIF Vulnerability Alert system.
            
            **Timeline**: Response required within ${criticalCount > 0 ? '4 hours' : highCount > 0 ? '24 hours' : '72 hours'} based on severity.
            
            ## Resources
            
            - [Security Policy](https://github.com/${{ github.repository }}/blob/main/SECURITY.md)
            - [Vulnerability Report Artifact](#)
            - [Security Response Playbook](#)
            
            /label ~security ~critical ~alert
            /assign @security-team
            /priority ${criticalCount > 0 ? 'critical' : 'high'}`;
            
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'vulnerability', severity, 'automated-alert']
            });
            
            console.log(`Created emergency issue #${issue.data.number}`);
            return issue.data.number;

      - name: Notify security team
        uses: actions/github-script@v7
        with:
          script: |
            // Post urgent notification comment
            const issueNumber = ${{ steps.create-issue.outputs.result }};
            const severity = '${{ needs.vulnerability-assessment.outputs.severity }}';
            const criticalCount = parseInt('${{ needs.vulnerability-assessment.outputs.critical-count }}');
            
            const urgentMessage = `⚠️ **URGENT SECURITY ALERT** ⚠️
            
            ${criticalCount > 0 ? '🔴 CRITICAL' : '🟡 HIGH'} severity vulnerabilities detected requiring immediate attention.
            
            **Response Time**: ${criticalCount > 0 ? '4 hours' : '24 hours'}
            **Security Team**: Please acknowledge receipt and begin response process.
            
            CC: @security-team @maintainer`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: urgentMessage
            });

  # Automated Remediation (Low/Medium vulnerabilities)
  automated-remediation:
    name: Automated Remediation
    runs-on: ubuntu-latest
    needs: vulnerability-assessment
    if: needs.vulnerability-assessment.outputs.action-required == 'false' && needs.vulnerability-assessment.outputs.total-count > 0
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Attempt automated fixes
        id: auto-fix
        run: |
          # Try to automatically update vulnerable packages
          updates_made=false
          
          # Check if we have requirements.txt
          if [ -f requirements.txt ]; then
            echo "Attempting to update Python dependencies..."
            
            # Create backup
            cp requirements.txt requirements.txt.backup
            
            # Try pip-audit with auto-fix (if available)
            if pip-audit --fix --dry-run; then
              pip-audit --fix
              updates_made=true
            fi
          fi
          
          echo "updates-made=$updates_made" >> $GITHUB_OUTPUT

      - name: Create remediation PR
        if: steps.auto-fix.outputs.updates-made == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const branchName = `security/auto-remediation-${Date.now()}`;
            
            // Create branch
            await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/heads/${branchName}`,
              sha: context.sha
            });
            
            // Create PR
            const pr = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🔒 Automated Security Remediation',
              head: branchName,
              base: 'main',
              body: `## Automated Security Updates
              
              This PR contains automated fixes for security vulnerabilities:
              
              - Updated vulnerable dependencies
              - Applied security patches where possible
              - Maintained compatibility with existing code
              
              **Review Required**: Please review these changes before merging.
              
              **Vulnerabilities Addressed**: ${{ needs.vulnerability-assessment.outputs.total-count }}
              **Severity**: Low to Medium
              
              Generated by RIF Vulnerability Alert System`,
              labels: ['security', 'automated', 'dependencies']
            });
            
            console.log(`Created remediation PR #${pr.data.number}`);

  # Monitoring and Reporting
  monitoring-report:
    name: Security Monitoring Report
    runs-on: ubuntu-latest
    needs: [vulnerability-assessment, emergency-response, automated-remediation]
    if: always()
    steps:
      - name: Generate security dashboard
        run: |
          cat << 'EOF' >> $GITHUB_STEP_SUMMARY
          # 🛡️ Security Monitoring Dashboard
          
          ## Vulnerability Assessment
          | Severity | Count | Status |
          |----------|-------|--------|
          | Critical | ${{ needs.vulnerability-assessment.outputs.critical-count }} | ${{ needs.vulnerability-assessment.outputs.critical-count > 0 && '🚨 Action Required' || '✅ OK' }} |
          | High | ${{ needs.vulnerability-assessment.outputs.high-count }} | ${{ needs.vulnerability-assessment.outputs.high-count > 5 && '⚠️ Review Needed' || '✅ OK' }} |
          | Medium | ${{ needs.vulnerability-assessment.outputs.medium-count }} | ${{ needs.vulnerability-assessment.outputs.medium-count > 20 && '⚠️ Monitor' || '✅ OK' }} |
          | Low | ${{ needs.vulnerability-assessment.outputs.low-count }} | ℹ️ Info |
          
          ## Response Actions
          - **Emergency Response**: ${{ needs.emergency-response.result == 'success' && '✅ Triggered' || needs.vulnerability-assessment.outputs.action-required == 'true' && '❌ Failed' || '➖ Not Required' }}
          - **Automated Remediation**: ${{ needs.automated-remediation.result == 'success' && '✅ Attempted' || '➖ Not Required' }}
          
          ## Security Score
          Overall Security Status: ${{ needs.vulnerability-assessment.outputs.severity == 'critical' && '🔴 Critical' || needs.vulnerability-assessment.outputs.severity == 'high' && '🟡 High Risk' || needs.vulnerability-assessment.outputs.severity == 'medium' && '🟢 Medium Risk' || '🟢 Low Risk' }}
          
          ---
          *Last updated: $(date -u)*
          EOF

      - name: Update security metrics
        run: |
          # Store security metrics for trending
          echo "Storing security metrics for historical tracking..."
          
          # This could be extended to push metrics to a monitoring system
          # or update a security dashboard