#!/usr/bin/env python3
"""
Pattern Visualization Demo Script

Demonstrates the pattern visualization capabilities implemented for issue #79.
Shows how to generate pattern graphs, analyze relationships, and export results.
"""

import sys
import json
from datetime import datetime, timedelta
from claude.commands.pattern_visualization_core import (
    PatternVisualizationCore,
    PatternNode,
    PatternEdge,
    PatternCluster
)


def create_demo_patterns():
    """Create sample pattern data for demonstration."""
    patterns = [
        {
            'pattern_id': 'consensus-architecture-design-pattern',
            'pattern_description': 'Multi-algorithm consensus architecture for RIF agent decision-making',
            'domain': 'multi_agent_coordination',
            'complexity': 'high',
            'source_issue': '58',
            'related_patterns': ['voting-aggregator-pattern', 'arbitration-pattern'],
            'metrics': {
                'total_applications': 15,
                'success_rate': 0.87,
                'last_used': (datetime.now() - timedelta(days=2)).isoformat()
            }
        },
        {
            'pattern_id': 'pattern-reinforcement-system',
            'pattern_description': 'Pattern learning and quality management system',
            'domain': 'machine_learning',
            'complexity': 'high',
            'source_issue': '78',
            'related_patterns': ['pattern-visualization'],
            'metrics': {
                'total_applications': 8,
                'success_rate': 0.92,
                'last_used': (datetime.now() - timedelta(days=1)).isoformat()
            }
        },
        {
            'pattern_id': 'pattern-visualization',
            'pattern_description': 'Pattern relationship visualization and analysis',
            'domain': 'visualization',
            'complexity': 'medium',
            'source_issue': '79',
            'related_patterns': ['pattern-reinforcement-system'],
            'metrics': {
                'total_applications': 3,
                'success_rate': 0.75,
                'last_used': datetime.now().isoformat()
            }
        },
        {
            'pattern_id': 'voting-aggregator-pattern',
            'pattern_description': 'Agent vote collection and aggregation system',
            'domain': 'multi_agent_coordination',
            'complexity': 'medium',
            'source_issue': '60',
            'related_patterns': ['consensus-architecture-design-pattern'],
            'metrics': {
                'total_applications': 12,
                'success_rate': 0.83,
                'last_used': (datetime.now() - timedelta(days=3)).isoformat()
            }
        },
        {
            'pattern_id': 'arbitration-pattern',
            'pattern_description': 'Conflict resolution and escalation handling',
            'domain': 'multi_agent_coordination',
            'complexity': 'high',
            'source_issue': '61',
            'related_patterns': ['consensus-architecture-design-pattern'],
            'metrics': {
                'total_applications': 6,
                'success_rate': 0.67,
                'last_used': (datetime.now() - timedelta(days=5)).isoformat()
            }
        },
        {
            'pattern_id': 'hybrid-pipeline-architecture-pattern',
            'pattern_description': 'Multi-modal data processing pipeline',
            'domain': 'data_processing',
            'complexity': 'high',
            'source_issue': '45',
            'related_patterns': [],
            'metrics': {
                'total_applications': 20,
                'success_rate': 0.95,
                'last_used': (datetime.now() - timedelta(days=1)).isoformat()
            }
        },
        {
            'pattern_id': 'file-monitoring-analysis-pattern',
            'pattern_description': 'Real-time file system monitoring and analysis',
            'domain': 'monitoring',
            'complexity': 'medium',
            'source_issue': '32',
            'related_patterns': ['enterprise-monitoring-pattern'],
            'metrics': {
                'total_applications': 25,
                'success_rate': 0.88,
                'last_used': (datetime.now() - timedelta(hours=12)).isoformat()
            }
        },
        {
            'pattern_id': 'enterprise-monitoring-pattern',
            'pattern_description': 'Comprehensive system monitoring and alerting',
            'domain': 'monitoring',
            'complexity': 'high',
            'source_issue': '33',
            'related_patterns': ['file-monitoring-analysis-pattern'],
            'metrics': {
                'total_applications': 18,
                'success_rate': 0.89,
                'last_used': (datetime.now() - timedelta(hours=6)).isoformat()
            }
        }
    ]
    
    return patterns


def demo_basic_functionality():
    """Demonstrate basic pattern visualization functionality."""
    print("=" * 60)
    print("PATTERN VISUALIZATION DEMO - BASIC FUNCTIONALITY")
    print("=" * 60)
    
    # Create visualization system
    viz = PatternVisualizationCore({
        'similarity_threshold': 0.4,
        'cluster_min_size': 2
    })
    
    # Get demo patterns
    patterns = create_demo_patterns()
    print(f"Created {len(patterns)} demo patterns")
    
    # Generate pattern graph
    print("\nGenerating pattern relationship graph...")
    graph_data = viz.generate_pattern_graph(
        patterns,
        layout_algorithm="spring",
        include_metrics=True
    )
    
    # Display results
    metadata = graph_data['metadata']
    print(f"\nüìä GRAPH GENERATION RESULTS:")
    print(f"  ‚Ä¢ Total Patterns: {metadata['total_patterns']}")
    print(f"  ‚Ä¢ Total Relationships: {metadata['total_relationships']}")
    print(f"  ‚Ä¢ Total Clusters: {metadata['total_clusters']}")
    print(f"  ‚Ä¢ Generation Time: {metadata['generation_time']:.3f} seconds")
    print(f"  ‚Ä¢ Layout Algorithm: {metadata['layout_algorithm']}")
    
    return graph_data


def demo_pattern_analysis(graph_data):
    """Demonstrate pattern analysis capabilities."""
    print("\n" + "=" * 60)
    print("PATTERN ANALYSIS DEMONSTRATION")
    print("=" * 60)
    
    nodes = graph_data['nodes']
    edges = graph_data['edges']
    clusters = graph_data['clusters']
    metrics = graph_data.get('metrics', {})
    
    # Analyze nodes
    print("\nüîç NODE ANALYSIS:")
    print(f"  Most used pattern: {max(nodes, key=lambda n: n['usage_count'])['name']}")
    print(f"  Highest success rate: {max(nodes, key=lambda n: n['success_rate'])['name']}")
    
    # Display top patterns by usage
    print("\nüìà TOP PATTERNS BY USAGE:")
    sorted_nodes = sorted(nodes, key=lambda n: n['usage_count'], reverse=True)
    for i, node in enumerate(sorted_nodes[:5]):
        print(f"  {i+1}. {node['name'][:40]:<40} ({node['usage_count']} uses, {node['success_rate']:.1%} success)")
    
    # Analyze relationships
    print("\nüîó RELATIONSHIP ANALYSIS:")
    if edges:
        strongest_edge = max(edges, key=lambda e: e['weight'])
        print(f"  Strongest relationship: {strongest_edge['weight']:.3f}")
        print(f"  Total relationships: {len(edges)}")
        
        # Relationship types
        relationship_types = {}
        for edge in edges:
            rel_type = edge['relationship_type']
            relationship_types[rel_type] = relationship_types.get(rel_type, 0) + 1
        
        print("  Relationship type distribution:")
        for rel_type, count in relationship_types.items():
            print(f"    ‚Ä¢ {rel_type}: {count}")
    
    # Analyze clusters
    print("\nüéØ CLUSTER ANALYSIS:")
    if clusters:
        for cluster in clusters:
            print(f"  ‚Ä¢ {cluster['label']}: {len(cluster['pattern_ids'])} patterns")
            print(f"    Domain: {cluster['dominant_domain']}")
            print(f"    Avg Success Rate: {cluster['average_success_rate']:.1%}")
    else:
        print("  No clusters identified")
    
    # Display detailed metrics
    if metrics:
        print("\nüìä DETAILED METRICS:")
        
        graph_overview = metrics.get('graph_overview', {})
        if graph_overview:
            print("  Graph Overview:")
            for key, value in graph_overview.items():
                print(f"    ‚Ä¢ {key.replace('_', ' ').title()}: {value}")
        
        usage_analysis = metrics.get('usage_analysis', {})
        if usage_analysis:
            print("  Usage Analysis:")
            for key, value in usage_analysis.items():
                print(f"    ‚Ä¢ {key.replace('_', ' ').title()}: {value}")
        
        success_analysis = metrics.get('success_analysis', {})
        if success_analysis:
            print("  Success Analysis:")
            for key, value in success_analysis.items():
                if isinstance(value, float):
                    print(f"    ‚Ä¢ {key.replace('_', ' ').title()}: {value:.1%}")
                else:
                    print(f"    ‚Ä¢ {key.replace('_', ' ').title()}: {value}")


def demo_export_functionality(graph_data):
    """Demonstrate export capabilities."""
    print("\n" + "=" * 60)
    print("EXPORT FUNCTIONALITY DEMONSTRATION")
    print("=" * 60)
    
    viz = PatternVisualizationCore()
    
    # Export to JSON
    json_path = "pattern_visualization_demo.json"
    success = viz.export_visualization(graph_data, json_path, "json")
    
    if success:
        print(f"‚úì Successfully exported visualization to {json_path}")
        
        # Show file size
        import os
        file_size = os.path.getsize(json_path)
        print(f"  File size: {file_size:,} bytes")
        
        # Show sample of exported data
        with open(json_path, 'r') as f:
            exported_data = json.load(f)
        
        print("  üìÑ Export Summary:")
        print(f"    ‚Ä¢ Nodes exported: {len(exported_data['nodes'])}")
        print(f"    ‚Ä¢ Edges exported: {len(exported_data['edges'])}")
        print(f"    ‚Ä¢ Clusters exported: {len(exported_data['clusters'])}")
        print(f"    ‚Ä¢ Metadata included: {'metadata' in exported_data}")
        print(f"    ‚Ä¢ Metrics included: {'metrics' in exported_data}")
        
    else:
        print("‚úó Export failed")


def demo_performance_metrics():
    """Demonstrate performance monitoring capabilities."""
    print("\n" + "=" * 60)
    print("PERFORMANCE METRICS DEMONSTRATION")
    print("=" * 60)
    
    viz = PatternVisualizationCore()
    
    # Generate multiple graphs to show performance tracking
    patterns = create_demo_patterns()
    
    print("Generating multiple visualizations to demonstrate performance tracking...")
    
    for i in range(3):
        print(f"  Generating visualization {i+1}...")
        subset_patterns = patterns[:4+i*2]  # Vary the size
        viz.generate_pattern_graph(subset_patterns)
    
    # Get performance metrics
    metrics = viz.get_performance_metrics()
    
    print("\n‚ö° PERFORMANCE METRICS:")
    for key, value in metrics.items():
        if isinstance(value, float):
            print(f"  ‚Ä¢ {key.replace('_', ' ').title()}: {value:.3f}")
        else:
            print(f"  ‚Ä¢ {key.replace('_', ' ').title()}: {value}")


def demo_filtering_capabilities():
    """Demonstrate pattern filtering capabilities."""
    print("\n" + "=" * 60)
    print("FILTERING CAPABILITIES DEMONSTRATION")
    print("=" * 60)
    
    viz = PatternVisualizationCore()
    patterns = create_demo_patterns()
    
    # Filter by domain
    print("üîç FILTERING BY DOMAIN:")
    domain_patterns = [p for p in patterns if p.get('domain') == 'multi_agent_coordination']
    graph_data = viz.generate_pattern_graph(domain_patterns)
    print(f"  ‚Ä¢ Multi-agent coordination patterns: {len(graph_data['nodes'])}")
    
    monitoring_patterns = [p for p in patterns if p.get('domain') == 'monitoring']
    graph_data = viz.generate_pattern_graph(monitoring_patterns)
    print(f"  ‚Ä¢ Monitoring patterns: {len(graph_data['nodes'])}")
    
    # Filter by complexity
    print("\nüîç FILTERING BY COMPLEXITY:")
    high_complexity = [p for p in patterns if p.get('complexity') == 'high']
    graph_data = viz.generate_pattern_graph(high_complexity)
    print(f"  ‚Ä¢ High complexity patterns: {len(graph_data['nodes'])}")
    
    # Filter by success rate
    print("\nüîç FILTERING BY SUCCESS RATE:")
    high_success = [p for p in patterns if p.get('metrics', {}).get('success_rate', 0) >= 0.85]
    graph_data = viz.generate_pattern_graph(high_success)
    print(f"  ‚Ä¢ High success rate patterns (‚â•85%): {len(graph_data['nodes'])}")
    
    # Filter by usage
    print("\nüîç FILTERING BY USAGE:")
    high_usage = [p for p in patterns if p.get('metrics', {}).get('total_applications', 0) >= 15]
    graph_data = viz.generate_pattern_graph(high_usage)
    print(f"  ‚Ä¢ Frequently used patterns (‚â•15 uses): {len(graph_data['nodes'])}")


def main():
    """Main demonstration function."""
    print("üé® Pattern Visualization System - Issue #79 Implementation")
    print("   Comprehensive pattern relationship analysis and visualization")
    print("   Built with fallback support for environments without heavy dependencies")
    
    try:
        # Run demonstrations
        graph_data = demo_basic_functionality()
        demo_pattern_analysis(graph_data)
        demo_export_functionality(graph_data)
        demo_performance_metrics()
        demo_filtering_capabilities()
        
        print("\n" + "=" * 60)
        print("‚úÖ DEMONSTRATION COMPLETE")
        print("=" * 60)
        print("\nPattern visualization system successfully demonstrates:")
        print("  ‚úì Pattern graph generation with nodes, edges, and clusters")
        print("  ‚úì Relationship analysis based on similarity metrics")
        print("  ‚úì Success rate visualization with color coding")
        print("  ‚úì Automatic clustering of related patterns")  
        print("  ‚úì Interactive analysis capabilities")
        print("  ‚úì Export functionality for further processing")
        print("  ‚úì Performance monitoring and metrics")
        print("  ‚úì Flexible filtering and querying")
        print("\nüìÑ Exported data available in: pattern_visualization_demo.json")
        
        # Show acceptance criteria compliance
        print("\nüéØ ACCEPTANCE CRITERIA COMPLIANCE:")
        print("  ‚úÖ Visualizes relationships clearly")
        print("  ‚úÖ Shows success metrics") 
        print("  ‚úÖ Identifies clusters")
        print("  ‚úÖ Supports interaction (programmatic interface)")
        
    except Exception as e:
        print(f"\n‚ùå Demo failed with error: {e}")
        import traceback
        traceback.print_exc()
        return 1
    
    return 0


if __name__ == "__main__":
    sys.exit(main())