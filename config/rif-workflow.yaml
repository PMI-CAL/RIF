# RIF Workflow Configuration
# Defines the automatic workflow state machine and transitions

workflow:
  name: "RIF Automatic Workflow"
  version: "2.0.0"
  
  # Initial state for all new issues
  initial_state: "new"
  
  # All possible states
  states:
    new:
      description: "Issue created, awaiting analysis"
      timeout: "30m"
      
    analyzing:
      description: "RIF-Analyst analyzing requirements"
      agent: "rif-analyst"
      timeout: "1h"
      
    planning:
      description: "RIF-Planner creating execution plan"
      agent: "rif-planner"
      timeout: "1h"
      
    architecting:
      description: "RIF-Architect designing solution"
      agent: "rif-architect"
      timeout: "2h"
      
    implementing:
      description: "RIF-Implementer writing code"
      agent: "rif-implementer"
      timeout: "4h"
      checkpoints: true
      
    validating:
      description: "RIF-Validator testing solution"
      agent: "rif-validator"
      timeout: "2h"
      
    documenting:
      description: "RIF-Documenter generating documentation"
      agent: "rif-documenter"
      timeout: "1h"
      
    learning:
      description: "RIF-Learner updating knowledge base"
      agent: "rif-learner"
      timeout: "30m"
      
    reviewing:
      description: "RIF-Reviewer analyzing code quality"
      agent: "rif-reviewer"
      timeout: "1h"
      
    skeptical_review:
      description: "RIF-Validator conducting adversarial verification"
      agent: "rif-validator"
      timeout: "2h"
      parallel_to: ["implementing", "architecting"]
      risk_based: true
      
    evidence_gathering:
      description: "RIF-Validator collecting validation evidence"
      agent: "rif-validator"
      timeout: "1h"
      required_for: ["complete"]
      
    quality_tracking:
      description: "Shadow quality monitoring via parallel issue"
      agent: "rif-validator"
      shadow_issue: true
      continuous: true
      parallel_orchestration: true
      
    pr_creating:
      description: "RIF-PR-Manager creating pull request"
      agent: "rif-pr-manager"
      timeout: "30m"
      
    pr_validating:
      description: "RIF-PR-Manager validating PR quality gates"
      agent: "rif-pr-manager"
      timeout: "2h"
      
    pr_merging:
      description: "RIF-PR-Manager executing merge strategy"
      agent: "rif-pr-manager"
      timeout: "30m"
      
    deploying:
      description: "RIF-PR-Manager coordinating deployment"
      agent: "rif-pr-manager" 
      timeout: "1h"
      
    complete:
      description: "Work finished successfully"
      final: true
      
    blocked:
      description: "Work blocked, needs intervention"
      alert: true
      
    failed:
      description: "Work failed, needs recovery"
      alert: true
      recovery: true

  # Automatic state transitions
  transitions:
    - from: "new"
      to: "analyzing"
      trigger: "auto"
      condition: "always"
      
    - from: "analyzing"
      to: "planning"
      trigger: "analysis_complete"
      condition: "patterns_found OR complexity_assessed"
      
    - from: "planning"
      to: "architecting"
      trigger: "plan_complete"
      condition: "complexity >= high"
      
    - from: "planning"
      to: "implementing"
      trigger: "plan_complete"
      condition: "complexity < high"
      
    - from: "architecting"
      to: "implementing"
      trigger: "design_complete"
      condition: "dependencies_mapped"
      
    - from: "implementing"
      to: "validating"
      trigger: "code_complete"
      condition: "tests_written"
      
    - from: "validating"
      to: "documenting"
      trigger: "tests_pass"
      condition: "quality_gates_pass"
      
    - from: "validating"
      to: "implementing"
      trigger: "tests_fail"
      condition: "fixable_errors"
      
    - from: "validating"
      to: "failed"
      trigger: "tests_fail"
      condition: "critical_errors"
      
    - from: "documenting"
      to: "pr_creating"
      trigger: "docs_complete"
      condition: "pr_needed"
      
    - from: "documenting"
      to: "learning"
      trigger: "docs_complete"
      condition: "no_pr_needed"
      
    - from: "pr_creating"
      to: "pr_validating"
      trigger: "pr_created"
      condition: "quality_gates_triggered"
      
    - from: "pr_validating"
      to: "pr_merging"
      trigger: "validation_complete"
      condition: "all_gates_pass"
      
    - from: "pr_validating"
      to: "implementing"
      trigger: "validation_failed"
      condition: "fixable_issues"
      
    - from: "pr_merging"
      to: "deploying"
      trigger: "merge_complete"
      condition: "deployment_required"
      
    - from: "pr_merging"
      to: "learning"
      trigger: "merge_complete"
      condition: "no_deployment_needed"
      
    - from: "deploying"
      to: "learning"
      trigger: "deployment_complete"
      condition: "always"
      
    - from: "reviewing"
      to: "learning"
      trigger: "review_approved"
      condition: "changes_approved"
      
    - from: "reviewing"
      to: "implementing"
      trigger: "changes_requested"
      condition: "minor_changes"
      
    - from: "reviewing"
      to: "architecting"
      trigger: "changes_requested"
      condition: "major_changes"
      
    - from: "learning"
      to: "complete"
      trigger: "knowledge_updated"
      condition: "always"
      
    # Adversarial testing flow transitions
    - from: "implementing"
      to: "skeptical_review"
      trigger: "code_ready"
      condition: "risk_level >= medium"
      parallel: true
      
    - from: "skeptical_review"
      to: "evidence_gathering"
      trigger: "missing_evidence"
      condition: "evidence_incomplete"
      
    - from: "evidence_gathering"
      to: "validating"
      trigger: "evidence_complete"
      condition: "all_evidence_provided"
      
    - from: "validating"
      to: "implementing"
      trigger: "validation_failed"
      condition: "evidence_insufficient OR quality_score < 60"
      
    - from: "quality_tracking"
      to: "complete"
      trigger: "main_issue_complete"
      condition: "shadow_issue_closed"
      
    # Recovery transitions
    - from: "blocked"
      to: "analyzing"
      trigger: "unblocked"
      condition: "manual_intervention"
      
    - from: "failed"
      to: "analyzing"
      trigger: "retry"
      condition: "checkpoint_available"

  # Parallel execution rules
  parallel:
    enabled: true
    max_concurrent: 4
    
    allowed_states:
      - "implementing"
      - "validating"
      - "documenting"
      - "pr_validating"
      - "deploying"
      - "skeptical_review"
      - "evidence_gathering"
      - "quality_tracking"
      
    constraints:
      - "Cannot parallelize across different issues"
      - "Must maintain dependency order"
      - "Quality gates must be sequential"

  # Checkpoint configuration
  checkpoints:
    enabled: true
    
    automatic_triggers:
      - "state_transition"
      - "test_failure"
      - "error_detected"
      - "timeout_approaching"
      
    retention:
      successful: "7d"
      failed: "30d"
      
    recovery:
      automatic: true
      max_attempts: 3
      backoff: "exponential"

  # Quality gates
  quality_gates:
    code_coverage:
      threshold: 80
      required: true
      blocker: true
      
    security_scan:
      threshold: "no_critical"
      required: true
      blocker: true
      
    linting:
      threshold: "no_errors"
      required: true
      blocker: false
      
    performance:
      threshold: "baseline"
      required: false
      blocker: false
      
    documentation:
      threshold: "complete"
      required: true
      blocker: false
      
    evidence_requirements:
      threshold: "100%"
      required: true
      blocker: true
      validation: "All claims must have verifiable evidence"
      
    quality_score:
      threshold: 80
      formula: "100 - (20 × FAILs) - (10 × CONCERNS)"
      required: true
      blocker: true
      deterministic: true
      
    risk_assessment:
      threshold: "acceptable"
      escalation_triggers:
        - "security_changes"
        - "auth_modifications"
        - "payment_processing"
        - "large_diff"
        - "no_tests"
      blocker: false
      advisory: true

  # Complexity assessment
  complexity:
    factors:
      - name: "lines_of_code"
        weight: 0.3
        thresholds:
          low: 50
          medium: 500
          high: 2000
          very_high: 5000
          
      - name: "files_affected"
        weight: 0.2
        thresholds:
          low: 1
          medium: 5
          high: 20
          very_high: 50
          
      - name: "dependencies"
        weight: 0.3
        thresholds:
          low: 0
          medium: 3
          high: 10
          very_high: 20
          
      - name: "cross_cutting"
        weight: 0.2
        thresholds:
          low: false
          medium: false
          high: true
          very_high: true

  # Planning depth
  planning_depth:
    shallow:
      complexity: "low"
      max_depth: 1
      agents: ["rif-analyst", "rif-implementer", "rif-validator"]
      
    standard:
      complexity: "medium"
      max_depth: 3
      agents: ["rif-analyst", "rif-planner", "rif-implementer", "rif-validator"]
      
    deep:
      complexity: "high"
      max_depth: 5
      agents: ["rif-analyst", "rif-planner", "rif-architect", "rif-implementer", "rif-validator", "rif-documenter"]
      
    recursive:
      complexity: "very_high"
      max_depth: 10
      agents: "all"
      decompose: true
      sub_issues: true

  # Monitoring and alerts
  monitoring:
    metrics:
      - "state_duration"
      - "transition_count"
      - "checkpoint_usage"
      - "quality_scores"
      - "agent_performance"
      
    alerts:
      stuck_workflow:
        condition: "state_duration > timeout"
        action: "escalate"
        
      quality_failure:
        condition: "quality_gate_failed"
        action: "rollback"
        
      repeated_failure:
        condition: "failure_count > 3"
        action: "manual_review"

  # Evidence requirements by claim type
  evidence_requirements:
    feature_complete:
      mandatory:
        - unit_tests_passing
        - integration_tests_passing
        - coverage_report
        - functional_testing_results
      optional:
        - performance_metrics
        - user_acceptance_testing
        - accessibility_audit
        
    bug_fixed:
      mandatory:
        - regression_test_added
        - root_cause_analysis
        - fix_verification_test
        - before_after_comparison
      optional:
        - prevention_measures_documented
        - related_bug_tests_added
        - monitoring_alerting_updated
        
    performance_improved:
      mandatory:
        - baseline_performance_metrics
        - after_performance_metrics
        - statistical_comparison_analysis
        - load_testing_results
      optional:
        - profiling_data
        - resource_utilization_analysis
        - scalability_testing
        
    security_validated:
      mandatory:
        - automated_vulnerability_scan
        - security_test_results
        - threat_model_review
        - penetration_testing_summary
      optional:
        - compliance_checklist
        - security_audit_trail
        - third_party_security_review
        
    refactoring_complete:
      mandatory:
        - before_after_code_metrics
        - test_suite_still_passing
        - performance_unchanged_proof
        - api_compatibility_verified
      optional:
        - code_quality_improvements
        - technical_debt_reduction
        - maintainability_metrics

  # Shadow quality tracking configuration
  shadow_quality_tracking:
    enabled: true
    auto_create: true
    prefix: "Quality Tracking:"
    labels:
      - "quality:shadow"
      - "state:quality-tracking"
    triggers:
      complexity: ["medium", "high", "very-high"]
      risk_level: ["medium", "high", "critical"]
      security_changes: true
      large_changes: ">500 lines"
      
  # Verification parallelism configuration  
  verification_parallelism:
    enabled: true
    strategies:
      main_development:
        states: ["implementing", "architecting", "planning"]
        description: "Primary development workflow"
      quality_assurance:
        states: ["skeptical_review", "quality_tracking", "evidence_gathering"]
        description: "Parallel quality verification"
      can_run_simultaneously: true
      max_parallel_streams: 2
      
  # Adversarial testing configuration
  adversarial_testing:
    enabled: true
    default_mindset: "skeptical"
    evidence_based_decisions: true
    risk_escalation:
      enabled: true
      auto_triggers: true
      escalation_factors:
        - security_file_changes
        - authentication_modifications  
        - payment_processing_changes
        - large_diffs
        - missing_tests
        - previous_failures

  # GitHub integration
  github:
    auto_labels:
      enabled: true
      prefix: "rif-"
      
    auto_comments:
      enabled: true
      format: "markdown"
      include_metrics: true
      
    auto_pr:
      enabled: true
      draft: false
      reviewers: "auto"
      
    auto_close:
      enabled: true
      on_complete: true
      add_comment: true