# PR Automation Performance Tuning Configuration
# Issue #283 - Phase 4: Optimization and Documentation
#
# This configuration file contains adjustable parameters for the GitHub-native
# PR automation system. Modify these values to tune performance based on
# your project's specific needs and observed metrics.

# System Metadata
system_info:
  config_version: "1.0"
  issue_reference: "#283"
  phase: "Phase 4 - Optimization"
  last_updated: "2025-08-27"
  component: "GitHub-Native PR Automation"

# Complexity Scoring System
# Controls how PRs are classified and routed to different automation levels
complexity_scoring:
  # File-based complexity factors
  file_thresholds:
    trivial:
      max_files_changed: 2
      max_lines_changed: 10
      allowed_extensions: [".md", ".txt", ".json", ".yml", ".yaml"]
      
    simple:
      max_files_changed: 5
      max_lines_changed: 50
      exclude_patterns: ["src/core/", "config/security/", ".github/workflows/"]
      
    medium:
      max_files_changed: 15
      max_lines_changed: 200
      require_test_changes: true
      
    complex:
      max_files_changed: 999  # No limit
      max_lines_changed: 999  # No limit
      always_human_review: false

  # Content-based complexity factors
  content_analysis:
    high_risk_patterns:
      - "security"
      - "authentication"
      - "authorization" 
      - "cryptography"
      - "database migration"
      - "schema change"
      - "api breaking change"
      
    architecture_patterns:
      - "interface changes"
      - "class hierarchy"
      - "dependency injection"
      - "design pattern"
      - "architecture"
      
    dependency_patterns:
      - "package.json"
      - "requirements.txt" 
      - "Cargo.toml"
      - "pom.xml"
      - "build.gradle"

  # Special case overrides
  special_cases:
    dependency_updates:
      # Auto-classify dependency-only PRs as trivial
      title_patterns: ["^bump", "^update", "^upgrade", "^deps", "^dependencies"]
      force_classification: "trivial"
      max_lines_override: 1000
      
    documentation_changes:
      # Classify doc-only changes as simple
      path_patterns: ["docs/", "README", "*.md"]
      force_classification: "simple"
      
    test_only_changes:
      # Classify test-only changes as simple
      path_patterns: ["test/", "tests/", "*test*", "*spec*"]
      force_classification: "simple"
      
    hotfix_changes:
      # Always route hotfixes to RIF agents
      branch_patterns: ["hotfix/", "fix/critical", "emergency/"]
      force_classification: "complex"

# Automation Level Boundaries
# Define thresholds for routing PRs to different automation systems
automation_levels:
  github_only:
    description: "Full GitHub Actions automation with auto-merge"
    complexity_requirements: ["trivial"]
    additional_conditions:
      - no_security_impact: true
      - has_existing_tests: true
      - author_trusted: true  # GitHub teams/collaborators
      - no_breaking_changes: true
    auto_merge_delay: 0  # minutes
    required_checks: ["lint", "test", "security-scan"]
    
  copilot_assisted:
    description: "GitHub Copilot review + automated quality gates"
    complexity_requirements: ["simple", "medium"]
    additional_conditions:
      - test_coverage_maintained: true
      - no_critical_vulnerabilities: true
      - copilot_available: true
    auto_merge_delay: 15  # minutes (allow time for review)
    required_checks: ["lint", "test", "security-scan", "copilot-review"]
    
  rif_integration:
    description: "RIF agent involvement for complex changes"
    complexity_requirements: ["complex"]
    additional_conditions:
      - manual_review_required: true
      - architecture_impact: true
      - security_sensitive: true
    auto_merge_delay: 0  # No auto-merge, manual approval required
    required_checks: ["full-validation-suite"]

# Quality Gate Thresholds
# Configure pass/fail criteria for various quality checks
quality_gates:
  code_quality:
    minimum_score: 80
    eslint_max_errors: 0
    eslint_max_warnings: 5
    flake8_max_errors: 0
    black_format_required: true
    
  security:
    max_critical_vulnerabilities: 0
    max_high_vulnerabilities: 0
    max_medium_vulnerabilities: 3
    codeql_required: true
    dependency_check_required: true
    
  test_coverage:
    minimum_coverage: 80
    coverage_decrease_threshold: -2  # Allow 2% decrease max
    new_code_coverage_minimum: 90
    require_tests_for_new_features: true
    
  performance:
    build_time_threshold: 300  # seconds
    test_execution_threshold: 180  # seconds
    bundle_size_increase_threshold: 10  # percent
    performance_regression_threshold: 15  # percent
    
  rif_validation:
    agent_instruction_compliance: true
    workflow_state_management: true
    knowledge_base_integration: true
    checkpoint_system_active: true

# Timeout and Retry Settings
# Control how long to wait and how many times to retry various operations
timeouts:
  workflow_execution:
    default_timeout: 1800  # 30 minutes
    quality_gate_timeout: 900  # 15 minutes
    deployment_timeout: 1200  # 20 minutes
    
  auto_merge_conditions:
    status_check_timeout: 600  # 10 minutes
    review_timeout: 3600  # 1 hour
    overall_merge_timeout: 7200  # 2 hours
    
  retry_policies:
    failed_checks:
      max_retries: 2
      retry_delay: 300  # 5 minutes
      exponential_backoff: true
      
    auto_fix_attempts:
      max_retries: 1
      retry_delay: 60  # 1 minute
      
    api_calls:
      max_retries: 3
      retry_delay: 30  # 30 seconds

# Performance Optimization Settings
# Configure system performance parameters
performance:
  parallel_execution:
    max_concurrent_workflows: 4
    max_parallel_quality_gates: 6
    resource_limits:
      cpu_per_workflow: "2 cores"
      memory_per_workflow: "4GB"
      disk_space_per_workflow: "10GB"
      
  caching:
    dependency_cache_ttl: 3600  # 1 hour
    build_cache_ttl: 86400  # 24 hours
    test_cache_ttl: 1800  # 30 minutes
    cache_compression: true
    
  optimization_strategies:
    incremental_builds: true
    selective_testing: true  # Only run affected tests
    parallel_linting: true
    skip_redundant_checks: true

# Auto-Fix Configuration
# Control automatic fixing of common issues
auto_fix:
  enabled_fixes:
    - linting_errors
    - formatting_issues
    - import_sorting
    - security_updates
    - dependency_updates
    
  fix_strategies:
    linting:
      tools: ["eslint --fix", "flake8", "black", "isort"]
      max_changes_per_fix: 50
      preserve_functionality: true
      
    security:
      auto_update_dependencies: true
      max_major_version_bumps: 0
      max_minor_version_bumps: 5
      vulnerability_severity_threshold: "medium"
      
    formatting:
      preserve_line_endings: true
      preserve_encoding: true
      respect_editor_config: true

# Monitoring and Alerting
# Configure monitoring thresholds and alert conditions
monitoring:
  performance_metrics:
    pr_processing_time:
      target: 35  # minutes
      warning_threshold: 60  # minutes  
      critical_threshold: 120  # minutes
      
    automation_success_rate:
      target: 85  # percent
      warning_threshold: 75  # percent
      critical_threshold: 60  # percent
      
    quality_gate_pass_rate:
      target: 95  # percent
      warning_threshold: 90  # percent
      critical_threshold: 80  # percent
      
  alerting:
    channels:
      - github_issues  # Create issue for critical alerts
      - workflow_logs  # Log to GitHub Actions
      - metrics_dashboard  # Update monitoring dashboard
      
    escalation:
      immediate: ["security_vulnerability_detected", "build_system_failure"]
      hourly: ["quality_gate_failure_rate_high", "automation_failure_spike"]
      daily: ["performance_degradation", "resource_usage_high"]

# Feature Flags
# Enable/disable specific features for gradual rollout
feature_flags:
  experimental_features:
    ai_powered_complexity_scoring: false
    predictive_auto_merge: false
    intelligent_reviewer_assignment: false
    dynamic_quality_thresholds: false
    
  rollout_controls:
    full_automation_rollout_percentage: 100
    copilot_integration_rollout_percentage: 100
    rif_agent_fallback_enabled: true
    emergency_manual_override: true

# Custom Rules
# Project-specific automation rules
custom_rules:
  repository_specific:
    # Add repository-specific overrides here
    language_specific_rules: {}
    team_specific_rules: {}
    branch_specific_rules: {}
    
  conditional_automation:
    # Rules that apply based on conditions
    weekend_automation:
      enabled: false
      reduced_automation_level: "rif_integration"
      
    high_activity_periods:
      detection_threshold: 10  # PRs per hour
      fallback_to_manual: false
      increased_review_time: true

# Integration Settings
# Configuration for external system integration
integrations:
  github:
    api_rate_limit_buffer: 20  # percent
    webhook_retry_attempts: 3
    webhook_timeout: 30  # seconds
    
  rif_system:
    agent_activation_delay: 60  # seconds
    knowledge_base_update_frequency: "immediate"
    checkpoint_creation_frequency: "on_major_milestones"
    
  external_tools:
    code_quality_tools:
      sonarqube_enabled: false
      codeclimate_enabled: false
      
    security_tools:
      snyk_enabled: true
      whitesource_enabled: false
      
    performance_tools:
      lighthouse_ci_enabled: false
      bundlewatch_enabled: true

# Troubleshooting and Debugging
# Settings to help diagnose issues
debugging:
  log_levels:
    workflow_execution: "info"
    quality_gates: "debug"
    auto_merge: "info"
    auto_fix: "debug"
    
  diagnostic_data:
    collect_performance_metrics: true
    collect_error_details: true
    collect_timing_information: true
    retention_period: 30  # days
    
  fallback_behaviors:
    on_workflow_timeout:
      action: "manual_intervention_required"
      notification: true
      
    on_quality_gate_failure:
      action: "block_merge"
      auto_fix_attempt: true
      
    on_system_unavailability:
      action: "fallback_to_rif_agents"
      notification: true

# Version and Changelog
version_info:
  current_version: "1.0.0"
  compatibility_version: "2025.1"
  changelog:
    - version: "1.0.0"
      date: "2025-08-27"
      changes:
        - "Initial configuration for GitHub-native PR automation"
        - "Complexity scoring system implementation"
        - "Progressive automation level definitions"
        - "Quality gate threshold configuration"
        - "Performance optimization settings"