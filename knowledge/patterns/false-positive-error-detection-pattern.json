{
  "id": "false-positive-error-detection-pattern",
  "title": "False Positive Error Detection and Filtering Pattern",
  "category": "error_handling",
  "complexity": "medium",
  "description": "Pattern for distinguishing between real errors and expected test failures to prevent false positive error detection",
  "context": {
    "applies_to": ["error_monitoring", "test_automation", "quality_assurance"],
    "triggers": ["exit_code_127_errors", "command_not_found", "test_command_execution"],
    "constraints": ["automated_error_reporting", "github_issue_creation", "false_positive_reduction"]
  },
  "pattern": {
    "problem": "Error detection systems create false GitHub issues for intentional test commands and expected failures, creating noise in issue tracking",
    "solution": {
      "components": [
        {
          "name": "test_command_detection",
          "description": "Identify commands that are intentionally designed to fail for testing purposes",
          "implementation": {
            "test_command_patterns": [
              "non_existent_command*",
              "fake_command*",
              "test_error_command*",
              "simulate_error*",
              "*_xyz",
              "*_test",
              "*_fake",
              "*_nonexistent"
            ],
            "pattern_matching": "Use substring matching and regex patterns to identify test commands"
          }
        },
        {
          "name": "context_analysis",
          "description": "Analyze execution context to determine if command is running in test environment",
          "implementation": {
            "stack_trace_analysis": "Examine call stack for test-related scripts and frameworks",
            "test_indicators": [
              "test_error_automation.py",
              "test_*.py", 
              "*_test.py",
              "/test/",
              "/tests/",
              "pytest",
              "unittest"
            ]
          }
        },
        {
          "name": "intelligent_filtering",
          "description": "Apply multi-layer filtering to reduce false positives while maintaining error detection",
          "implementation": {
            "filter_layers": [
              "command_pattern_matching",
              "context_detection", 
              "severity_assessment",
              "source_validation"
            ]
          }
        }
      ]
    },
    "benefits": [
      "Eliminates false positive GitHub issues",
      "Improves signal-to-noise ratio in error reporting", 
      "Maintains full error detection for real issues",
      "Reduces manual issue triage overhead"
    ]
  },
  "implementation": {
    "languages": ["python"],
    "frameworks": ["error_handling", "test_automation"],
    "key_files": [
      "claude/commands/session_error_handler.py"
    ],
    "code_examples": {
      "test_command_detection": {
        "python": "def _is_expected_failure(self, command: str, exit_code: int) -> bool:\n    test_commands = [\n        \"non_existent_command\", \"fake_command\",\n        \"test_error_command\", \"simulate_error\"\n    ]\n    \n    if any(cmd in command.lower() for cmd in test_commands):\n        return True\n    \n    if any(pattern in command.lower() for pattern in [\"_xyz\", \"_test\", \"_fake\", \"_nonexistent\"]):\n        return True\n    \n    return self._is_test_context()"
      },
      "context_detection": {
        "python": "def _is_test_context(self) -> bool:\n    stack = traceback.extract_stack()\n    test_indicators = [\n        \"test_error_automation.py\", \"test_\", \"_test.py\",\n        \"/test/\", \"/tests/\", \"pytest\", \"unittest\"\n    ]\n    \n    for frame in stack:\n        if any(indicator in frame.filename for indicator in test_indicators):\n            return True\n    \n    return False"
      }
    }
  },
  "validation": {
    "test_cases": [
      {
        "name": "intentional_test_command",
        "input": "non_existent_command_xyz",
        "expected": "filtered_out",
        "rationale": "Obvious test command pattern should be ignored"
      },
      {
        "name": "real_missing_command", 
        "input": "actual_missing_tool",
        "expected": "create_github_issue",
        "rationale": "Real missing dependencies should create issues"
      }
    ],
    "metrics": {
      "false_positive_reduction": "100%",
      "real_error_detection_preserved": "100%",
      "implementation_complexity": "medium"
    }
  },
  "lessons_learned": [
    "Error detection systems must distinguish between intentional and unintentional failures",
    "Pattern matching combined with context analysis provides robust filtering",
    "Test command naming conventions should follow predictable patterns",
    "Stack trace analysis is effective for determining execution context"
  ],
  "related_patterns": [
    "error-monitoring-system-pattern",
    "test-automation-pattern", 
    "quality-assurance-pattern"
  ],
  "source": {
    "issue": "#101",
    "date": "2025-08-24",
    "agent": "RIF-Learner",
    "session": "learning-extraction"
  }
}