-- Migration Script: Deploy DuckDB Knowledge Graph Schema
-- Issue #28: Implement DuckDB schema for knowledge graph  
-- Migration Version: v1.0.0
-- Generated by: RIF-Implementer
-- Date: 2025-08-23

-- =============================================================================
-- MIGRATION METADATA
-- =============================================================================

-- Create migration tracking table
CREATE TABLE IF NOT EXISTS schema_migrations (
    version VARCHAR(20) PRIMARY KEY,
    description TEXT NOT NULL,
    applied_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    applied_by VARCHAR(50) DEFAULT 'RIF-Implementer'
);

-- Record this migration
INSERT INTO schema_migrations (version, description) 
VALUES ('v1.0.0', 'Initial DuckDB knowledge graph schema deployment');

-- =============================================================================
-- PRE-MIGRATION CHECKS
-- =============================================================================

-- Check if tables already exist
CREATE OR REPLACE FUNCTION check_existing_tables()
RETURNS TEXT AS $$
DECLARE
    existing_count INTEGER;
BEGIN
    SELECT COUNT(*) INTO existing_count
    FROM information_schema.tables 
    WHERE table_name IN ('entities', 'relationships', 'agent_memory');
    
    IF existing_count > 0 THEN
        RETURN 'WARNING: ' || existing_count || ' tables already exist. Migration may fail.';
    END IF;
    
    RETURN 'OK: No conflicting tables found.';
END;
$$ LANGUAGE plpgsql;

SELECT check_existing_tables() AS pre_migration_check;

-- =============================================================================
-- BACKUP EXISTING DATA (IF ANY)
-- =============================================================================

-- Create backup tables for any existing data
CREATE TABLE IF NOT EXISTS entities_backup_20250823 AS 
SELECT * FROM entities WHERE 1=0;

CREATE TABLE IF NOT EXISTS relationships_backup_20250823 AS 
SELECT * FROM relationships WHERE 1=0;

CREATE TABLE IF NOT EXISTS agent_memory_backup_20250823 AS 
SELECT * FROM agent_memory WHERE 1=0;

-- =============================================================================
-- DEPLOY SCHEMA
-- =============================================================================

-- Load the main schema
.read duckdb_schema.sql

-- =============================================================================
-- POST-MIGRATION VALIDATION
-- =============================================================================

-- Validate schema deployment
CREATE OR REPLACE FUNCTION validate_migration()
RETURNS TABLE(component TEXT, status TEXT, details TEXT) AS $$
BEGIN
    -- Check tables
    RETURN QUERY
    SELECT 'Tables'::TEXT, 
           CASE WHEN COUNT(*) = 3 THEN 'SUCCESS' ELSE 'FAILED' END::TEXT,
           'Found ' || COUNT(*)::TEXT || '/3 required tables'::TEXT
    FROM information_schema.tables 
    WHERE table_name IN ('entities', 'relationships', 'agent_memory');
    
    -- Check indexes  
    RETURN QUERY
    SELECT 'Indexes'::TEXT,
           CASE WHEN COUNT(*) >= 12 THEN 'SUCCESS' ELSE 'WARNING' END::TEXT,
           'Created ' || COUNT(*)::TEXT || ' indexes'::TEXT
    FROM information_schema.indexes 
    WHERE table_name IN ('entities', 'relationships', 'agent_memory');
    
    -- Check materialized views
    RETURN QUERY
    SELECT 'Materialized Views'::TEXT,
           CASE WHEN COUNT(*) >= 5 THEN 'SUCCESS' ELSE 'FAILED' END::TEXT,
           'Created ' || COUNT(*)::TEXT || ' materialized views'::TEXT
    FROM information_schema.tables 
    WHERE table_name LIKE 'mv_%' AND table_type = 'MATERIALIZED VIEW';
    
    -- Check constraints
    RETURN QUERY
    SELECT 'Constraints'::TEXT,
           CASE WHEN COUNT(*) >= 8 THEN 'SUCCESS' ELSE 'WARNING' END::TEXT,
           'Applied ' || COUNT(*)::TEXT || ' check constraints'::TEXT
    FROM information_schema.check_constraints;
    
END;
$$ LANGUAGE plpgsql;

-- Run validation
SELECT * FROM validate_migration();

-- =============================================================================
-- SAMPLE DATA INSERTION (OPTIONAL)
-- =============================================================================

-- Insert initial sample data for testing
-- Note: Removed references to orchestrator.py as Claude Code IS the orchestrator
-- The RIF system uses Claude Code directly for orchestration, launching multiple Task agents in parallel

INSERT INTO agent_memory (agent_type, issue_number, context, decision, outcome) VALUES
('RIF-Implementer', 28, 'Schema migration deployment', 'Deploy comprehensive knowledge graph schema', 'success');

-- =============================================================================
-- MIGRATION COMPLETION
-- =============================================================================

-- Update migration status
UPDATE schema_migrations 
SET applied_at = CURRENT_TIMESTAMP 
WHERE version = 'v1.0.0';

-- Create migration success marker
CREATE TABLE migration_v1_0_0_complete AS 
SELECT 
    'v1.0.0' AS version,
    CURRENT_TIMESTAMP AS completed_at,
    'DuckDB Knowledge Graph Schema' AS description,
    'SUCCESS' AS status;

-- Display completion message
SELECT 
    '=== MIGRATION COMPLETE ===' AS message,
    'Version: v1.0.0' AS version,
    'Status: SUCCESS' AS status,
    'Description: DuckDB Knowledge Graph Schema deployed' AS details,
    CURRENT_TIMESTAMP AS completed_at;

-- =============================================================================
-- CLEANUP MIGRATION FUNCTIONS
-- =============================================================================

DROP FUNCTION IF EXISTS check_existing_tables();
DROP FUNCTION IF EXISTS validate_migration();

-- =============================================================================
-- END MIGRATION
-- =============================================================================