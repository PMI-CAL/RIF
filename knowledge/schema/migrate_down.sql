-- Rollback Script: Remove DuckDB Knowledge Graph Schema
-- Issue #28: Implement DuckDB schema for knowledge graph
-- Rollback Version: v1.0.0
-- Generated by: RIF-Implementer  
-- Date: 2025-08-23

-- =============================================================================
-- ROLLBACK METADATA
-- =============================================================================

-- Record rollback attempt
INSERT INTO schema_migrations (version, description, applied_by) 
VALUES ('v1.0.0-rollback', 'Rollback DuckDB knowledge graph schema', 'RIF-Implementer');

-- =============================================================================
-- PRE-ROLLBACK BACKUP
-- =============================================================================

-- Create emergency backup before rollback
CREATE TABLE entities_emergency_backup_20250823 AS SELECT * FROM entities;
CREATE TABLE relationships_emergency_backup_20250823 AS SELECT * FROM relationships;  
CREATE TABLE agent_memory_emergency_backup_20250823 AS SELECT * FROM agent_memory;

-- Count existing data for rollback report
CREATE TEMPORARY TABLE rollback_stats AS
SELECT 
    'entities' AS table_name, COUNT(*) AS record_count FROM entities
UNION ALL
SELECT 
    'relationships' AS table_name, COUNT(*) AS record_count FROM relationships
UNION ALL
SELECT 
    'agent_memory' AS table_name, COUNT(*) AS record_count FROM agent_memory;

-- =============================================================================
-- DROP MATERIALIZED VIEWS (REVERSE ORDER)
-- =============================================================================

-- Drop materialized views first (they depend on base tables)
DROP MATERIALIZED VIEW IF EXISTS mv_relationship_stats;
DROP MATERIALIZED VIEW IF EXISTS mv_entity_stats;
DROP MATERIALIZED VIEW IF EXISTS mv_agent_learnings;
DROP MATERIALIZED VIEW IF EXISTS mv_function_calls;
DROP MATERIALIZED VIEW IF EXISTS mv_module_dependencies;

-- =============================================================================
-- DROP TRIGGERS AND FUNCTIONS
-- =============================================================================

-- Drop triggers
DROP TRIGGER IF EXISTS tr_entities_update_timestamp ON entities;

-- Drop functions
DROP FUNCTION IF EXISTS update_entity_timestamp();

-- =============================================================================
-- DROP INDEXES
-- =============================================================================

-- Drop vector similarity indexes (VSS)
-- DROP INDEX IF EXISTS idx_entities_embedding;
-- DROP INDEX IF EXISTS idx_agent_memory_embedding;

-- Drop agent memory indexes
DROP INDEX IF EXISTS idx_agent_memory_created_at;
DROP INDEX IF EXISTS idx_agent_memory_type_issue;
DROP INDEX IF EXISTS idx_agent_memory_outcome;
DROP INDEX IF EXISTS idx_agent_memory_issue;
DROP INDEX IF EXISTS idx_agent_memory_type;

-- Drop relationship indexes  
DROP INDEX IF EXISTS idx_relationships_target_type;
DROP INDEX IF EXISTS idx_relationships_source_type;
DROP INDEX IF EXISTS idx_relationships_type;
DROP INDEX IF EXISTS idx_relationships_target;
DROP INDEX IF EXISTS idx_relationships_source;

-- Drop entity indexes
DROP INDEX IF EXISTS idx_entities_created_at;
DROP INDEX IF EXISTS idx_entities_type;
DROP INDEX IF EXISTS idx_entities_hash;
DROP INDEX IF EXISTS idx_entities_file_path;
DROP INDEX IF EXISTS idx_entities_type_name;

-- =============================================================================
-- DROP TABLES (REVERSE DEPENDENCY ORDER)
-- =============================================================================

-- Drop dependent tables first
DROP TABLE IF EXISTS relationships;
DROP TABLE IF EXISTS agent_memory;

-- Drop main entity table last
DROP TABLE IF EXISTS entities;

-- =============================================================================
-- RESTORE FROM BACKUP (IF REQUESTED)
-- =============================================================================

-- Restore functionality (commented out by default)
-- Uncomment these lines if you want to restore from backup during rollback

-- IF EXISTS(SELECT 1 FROM information_schema.tables WHERE table_name = 'entities_backup_20250823') THEN
--     CREATE TABLE entities AS SELECT * FROM entities_backup_20250823;
--     CREATE TABLE relationships AS SELECT * FROM relationships_backup_20250823;
--     CREATE TABLE agent_memory AS SELECT * FROM agent_memory_backup_20250823;
-- END IF;

-- =============================================================================
-- CLEANUP MIGRATION TRACKING
-- =============================================================================

-- Remove migration record
DELETE FROM schema_migrations WHERE version = 'v1.0.0';

-- Drop migration completion marker
DROP TABLE IF EXISTS migration_v1_0_0_complete;

-- =============================================================================
-- ROLLBACK VALIDATION
-- =============================================================================

-- Verify all components are removed
CREATE OR REPLACE FUNCTION validate_rollback()
RETURNS TABLE(component TEXT, status TEXT, remaining INTEGER) AS $$
BEGIN
    -- Check tables removed
    RETURN QUERY
    SELECT 'Tables'::TEXT, 
           CASE WHEN COUNT(*) = 0 THEN 'SUCCESS' ELSE 'FAILED' END::TEXT,
           COUNT(*)::INTEGER
    FROM information_schema.tables 
    WHERE table_name IN ('entities', 'relationships', 'agent_memory');
    
    -- Check indexes removed
    RETURN QUERY
    SELECT 'Indexes'::TEXT,
           CASE WHEN COUNT(*) = 0 THEN 'SUCCESS' ELSE 'WARNING' END::TEXT,
           COUNT(*)::INTEGER
    FROM information_schema.indexes 
    WHERE table_name IN ('entities', 'relationships', 'agent_memory');
    
    -- Check materialized views removed
    RETURN QUERY
    SELECT 'Materialized Views'::TEXT,
           CASE WHEN COUNT(*) = 0 THEN 'SUCCESS' ELSE 'FAILED' END::TEXT,
           COUNT(*)::INTEGER
    FROM information_schema.tables 
    WHERE table_name LIKE 'mv_%' AND table_type = 'MATERIALIZED VIEW';
    
    -- Check functions removed
    RETURN QUERY
    SELECT 'Functions'::TEXT,
           CASE WHEN COUNT(*) = 0 THEN 'SUCCESS' ELSE 'WARNING' END::TEXT,
           COUNT(*)::INTEGER
    FROM information_schema.routines 
    WHERE routine_name IN ('update_entity_timestamp');

END;
$$ LANGUAGE plpgsql;

-- Run rollback validation
SELECT * FROM validate_rollback();

-- =============================================================================
-- ROLLBACK COMPLETION REPORT
-- =============================================================================

-- Generate rollback report
SELECT 
    '=== ROLLBACK COMPLETE ===' AS message,
    'Version: v1.0.0' AS version,
    'Status: SUCCESS' AS status,
    'Action: All schema components removed' AS action,
    CURRENT_TIMESTAMP AS completed_at;

-- Display data backup information
SELECT 
    'DATA BACKUP INFO' AS info_type,
    table_name,
    record_count,
    'Backup table: ' || table_name || '_emergency_backup_20250823' AS backup_location
FROM rollback_stats;

-- Cleanup validation function
DROP FUNCTION IF EXISTS validate_rollback();
DROP TABLE IF EXISTS rollback_stats;

-- =============================================================================
-- FINAL CLEANUP
-- =============================================================================

-- Remove backup tables (uncomment if you want to clean up backups)
-- DROP TABLE IF EXISTS entities_backup_20250823;
-- DROP TABLE IF EXISTS relationships_backup_20250823;
-- DROP TABLE IF EXISTS agent_memory_backup_20250823;
-- DROP TABLE IF EXISTS entities_emergency_backup_20250823;
-- DROP TABLE IF EXISTS relationships_emergency_backup_20250823;
-- DROP TABLE IF EXISTS agent_memory_emergency_backup_20250823;

-- Update migration tracking with rollback completion
UPDATE schema_migrations 
SET applied_at = CURRENT_TIMESTAMP 
WHERE version = 'v1.0.0-rollback';

-- =============================================================================
-- ROLLBACK NOTES
-- =============================================================================

-- IMPORTANT NOTES:
-- 1. Emergency backups are preserved: *_emergency_backup_20250823
-- 2. Original backups are preserved: *_backup_20250823  
-- 3. Migration tracking remains for audit trail
-- 4. VSS extension indexes are commented out (depend on extension)
-- 5. Restore functionality is available but commented out

-- To restore from backup after rollback:
-- 1. Uncomment the restore section above
-- 2. Re-run this script
-- 3. Or manually restore: CREATE TABLE entities AS SELECT * FROM entities_backup_20250823;

-- =============================================================================
-- END ROLLBACK
-- =============================================================================