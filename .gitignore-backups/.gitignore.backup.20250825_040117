# ==================================================
# RIF Deployment Gitignore Template
# ==================================================
# This template is for deploying RIF as a project template.
# It excludes RIF framework files while preserving project development files.
# 
# Strategy: Specifically ignore RIF files rather than broadly excluding directories
# This allows project files in similar locations to be tracked properly.

# ==================================================
# RIF Framework Files (DO NOT COMMIT)
# ==================================================

# Core RIF directories (complete exclusion)
.rif/
claude/agents/
claude/commands/
claude/rules/
engines/
generators/
automation/
systems/

# RIF-specific configuration files
config/rif-*.yaml
config/framework-*.yaml
config/multi-agent.yaml
config/adaptive-*.yaml
config/consensus-*.yaml
config/dynamic-*.yaml
config/emergency-*.yaml
config/enhanced_*.yaml
config/error-*.yaml
config/integrated-*.yaml
config/monitoring.yaml
config/quality-*.yaml
config/risk-*.yaml
config/shadow-*.yaml
config/threshold-*.yaml

# RIF scripts and initialization
scripts/rif-*.sh
scripts/newproject.sh  
scripts/setup.sh
rif-init*.sh
deploy-production.sh

# RIF knowledge base (selective exclusion)
knowledge/audits/
knowledge/checkpoints/
knowledge/enforcement_logs/
knowledge/evidence_collection/
knowledge/false_positive_detection/
knowledge/validation/
knowledge/arbitration/
knowledge/adversarial_testing/
knowledge/demo_*/
knowledge/*.duckdb*
knowledge/cutover_config.json
knowledge/demo_*.json
knowledge/migration_*.json
knowledge/shadow-mode.log

# RIF architecture and planning docs  
architecture/rif-*.md
architecture/adversarial-*.md
architecture/agent-*.md
architecture/error-*.md
architecture/hybrid-*.md
architecture/lightrag-*.md
architecture/mcp-*.md
planning/rif-*.md

# RIF development artifacts and demos
validation/
incidents/
reports/
benchmarking/
htmlcov/
test_output/

# RIF demo and test files (root level)
demo_*.py
test_*.py
fix_*.py
validate_*.py
analyze_*.py
comprehensive_*.py
dynamic_*_test.py
execute_migration.py
migrate_*.py
security_validation_test.py
*_validation_results_*.json
*_test_results.json
*_audit_*.json
audit_*.py

# RIF implementation files (specific patterns)
test_issue_*.py
issue_*_validation_results_*.json
*_validation_report.json
*_validation_summary.md
*_implementation_*.md
*_summary.md
*IMPLEMENTATION*.md
*VALIDATION*.md
*SUMMARY*.md
*REPORT*.md
*COMPLETE*.md

# RIF temporary and generated files  
integration_test_results.json
migration_validation_report.json
pattern_visualization_demo.json
performance_results.json
pipeline_performance_results.json
real_patterns_visualization.json
migration.log
shadow-mode.log

# ==================================================
# Standard Development Ignores
# ==================================================

# Dependencies
node_modules/
bower_components/
vendor/
venv/
env/
.virtualenv/
.conda/
*.egg-info/
dist/
build/
target/
.gradle/
.m2/

# IDE and Editor Files
.vscode/
.idea/
.eclipse/
.netbeans/
*.sublime-*
*.swp
*.swo
*~
.DS_Store
Thumbs.db

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local
.env.*.local

# Logs and debugging
*.log
logs/
log/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.npm/
.eslintcache

# Testing and coverage (but allow project-specific)
coverage/
.coverage
htmlcov/
.tox/
.pytest_cache/
.nox/
__pycache__/
*.py[cod]
*$py.class
*.cover
.hypothesis/
junit.xml
test-results/
*.spec.js.snap

# Build outputs
*.exe
*.dll
*.so
*.dylib
bin/
obj/
out/
.next/
.nuxt/
.vuepress/dist/

# Temporary files
*.tmp
*.temp
*.bak
*.backup
*~
*.orig
.sass-cache/
.cache/
.parcel-cache/

# OS generated files
.DS_Store*
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db
desktop.ini

# Package managers
.pnpm-store/
.yarn/
.npm/
.pnpm-debug.log*

# Database files (local development)
*.sqlite
*.sqlite3
*.db
*.duckdb
*.duckdb.wal

# Security and secrets
*.pem
*.key
*.crt
*.p12
*.jks
secrets/
.secrets/

# ==================================================
# Language-Specific Ignores
# ==================================================

# JavaScript/Node.js
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.npm/
.eslintcache
.nyc_output/
lib-cov/
coverage/
.grunt/
.lock-wscript
build/Release/
.node_repl_history
*.tgz
.yarn-integrity
.env.local
.env.development.local
.env.test.local
.env.production.local

# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST
*.manifest
*.spec
pip-log.txt
pip-delete-this-directory.txt
.tox/
.nox/
.coverage
.pytest_cache/
.hypothesis/
.mypy_cache/
.pyre/
.pytype/
cython_debug/

# Java
*.class
*.ctxt
.mtj.tmp/
*.jar
*.war
*.nar
*.ear
*.zip
*.tar.gz
*.rar
hs_err_pid*
.gradle/
build/
!gradle/wrapper/gradle-wrapper.jar
!**/src/main/**/build/
!**/src/test/**/build/
.gradletasknamecache
.project
.classpath
.settings/
bin/
tmp/
*.tmp
*.bak
*.swp
*~.nib
.metadata
.recommenders
target/
.m2/

# Go
# Binaries for programs and plugins
*.exe
*.exe~
*.dll
*.so
*.dylib
# Test binary, built with `go test -c`
*.test
# Output of the go coverage tool
*.out
# Dependency directories
vendor/
# Go workspace file
go.work

# Rust
/target/
**/*.rs.bk
Cargo.lock

# C/C++
*.o
*.ko
*.obj
*.elf
*.ilk
*.map
*.exp
*.gch
*.pch
*.lib
*.a
*.la
*.lo
*.dll
*.so
*.so.*
*.dylib
*.exe
*.out
*.app

# ==================================================
# Framework-Specific Ignores
# ==================================================

# React
.env.local
.env.development.local
.env.test.local
.env.production.local
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Vue.js
node_modules/
/dist/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
/test/unit/coverage/
/test/e2e/reports/
selenium-debug.log
.nyc_output

# Angular
/dist/
/tmp/
/out-tsc/
/bazel-out/
/node_modules/
npm-debug.log
yarn-error.log
.sass-cache/
/connect.lock
/coverage/
/libpeerconnection.log
testem.log
/typings

# Django
local_settings.py
db.sqlite3
db.sqlite3-journal
media

# Rails
*.rbc
capybara-*.html
.rspec
/db/*.sqlite3
/db/*.sqlite3-journal
/public/system
/coverage/
/spec/tmp
*.orig
rerun.txt
pickle-email-*.html
/vendor/bundle
/config/initializers/secret_token.rb
/config/master.key
/config/credentials.yml.enc
.byebug_history

# Laravel
/node_modules
/public/hot
/public/storage
/storage/*.key
/vendor
.env
.env.backup
.phpunit.result.cache
docker-compose.override.yml
Homestead.json
Homestead.yaml
npm-debug.log
yarn-error.log

# ==================================================
# Cloud and Deployment Ignores
# ==================================================

# Docker
.dockerignore
docker-compose.override.yml

# Terraform
*.tfstate
*.tfstate.*
.terraform/
.terraform.lock.hcl
*.tfvars
*.auto.tfvars

# AWS
.aws/
aws-exports.js

# Kubernetes
*.kubeconfig

# ==================================================
# Project-Specific Preservations (Examples)
# ==================================================
# The following patterns ensure project files are NOT ignored
# even if they might match broader patterns above

# Project-specific knowledge (preserved)
!knowledge/patterns/project-*.json
!knowledge/decisions/project-*.json
!knowledge/learning/project-*.json
!knowledge/metrics/project-*.json

# Project-specific configuration (preserved)
!config/project-*.yaml
!config/app-*.yaml
!config/service-*.yaml

# Project documentation (preserved - already not ignored)
# docs/ directory and files are not ignored by default
# README.md, LICENSE, etc. are not ignored by default

# ==================================================
# Custom Project Additions
# ==================================================
# Add your project-specific ignore patterns below this line
# 
# Examples:
# my-custom-build/
# *.myext
# local-config.json